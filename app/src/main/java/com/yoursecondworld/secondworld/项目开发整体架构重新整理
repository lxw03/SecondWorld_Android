关于本应用,理应开工之前对项目好好的设计一番,但是由于本人是应届生,也没有很多的经验来设计,只能是不断的去踩每一个坑来填补空缺,而现在项目也上线了,虽然说很多
地方是我不满意的,甚至说想重新写的,但是后面的版本接踵而至,没有时间去重构一些模块

关于网络访问这块,由于项目中需要对每一个请求进行判断,是不是session失效了,如果失效了就去登陆的界面,这个功能说起来非常简单,但是做起来却是非常的麻烦
有几个问题:
判断的逻辑写在哪里
如果失效了,如何通知所有的界面
用EventBus?
判断的代码要写很多遍?显然这不是我想要的,所以这里需要怎么样设计才能在结果返回的拦截到所有的请求

关于使用MVP模式的我有话说
由于很多界面用到相同的接口访问,所以理当每个界面用同一个presenter,但是问题来了,并不是每个界面都是需要全部的接口方法的,比如A界面需要加载动态和拉黑用户的功能
B界面只需要拉黑的功能,C界面只需要加载动态,这就导致了用同一个presenter的时候每一个Act都会实现全部的View层的抽象方法,但是act中有很多的空实现
这时候我能想到的就是对每一个act建立一个独立的presneter,我们可以通过重用model来减少代码量,这样子就不会出现上述的问题

关于Act我也有话说
有些时候我们弄一个界面的时候,会发现这个界面很复杂,比如举例一个简单的,一个界面有一个列表,列表第一个item是一个轮播图
这时候我以前的做法是全部的交互都写在了act中
其实可以让代码看的更清爽的,我们可以对Header Item建立一个对应的类,这个类负责Header中的交互,然后又有一个问题就是有时候Header对应的类需要和Act进行数据的交互
这时候我们应该建立一个HeadView的接口,让Act实现,然后Act在创建Header的时候就传入这个接口的实现(也就是自己),这样子就可以实现Header和Act的交互了
这样子的写法必然导致会多创建很多的类,但是我觉得在界面结构比较负责或者界面逻辑比较多的情况下,尽量的分工会大大的降低耦合性和提高代码的重用性,当然了最重要的
一点就是让我看上去代码清晰

还有关于项目模块之前的设计
每一个模块应该是一个独立的整体,当然了有时候需要公用一些数据,比如用户登录以后的用户信息,所以今后我再开发项目的时候,我就会针对App建立一个项目的配置类
里面存放的是项目开发中模块和模块之间公用的数据


我的目标就是无论后台的接口多么恶心,我的app代码质量依然很高!!!!!!!!!!!!!!!!!!!!!!!!

对于每一个Activity,我应该看成是一个功能模块,和其他的Activity尽量没有任何关联,针对一个Activity,我目前的想法是再细分功能,使用类来描述更小的一个功能
然后类中难免要用到Activity中的成员变量,那么索性对成员变量都封装一下,放到一个类中,然后各个小功能模块都可以引用这个变量类